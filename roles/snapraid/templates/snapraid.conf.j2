# Managed by Ansible

# Defines the file to use as parity storage
# It must NOT be in a data disk
# Format: "parity FILE [,FILE] ..."
{% for int in snapraid.disks|sort %}
{% set _int = snapraid.disks[int] %}
{% if _int['type']|lower == 'parity' %}
{% set count = ( count | default(0) ) + 1 %}
{% if count == 1 %}parity {{ _int['mount'] }}/snapraid.parity
{% elif count < 7 %}
{{ count }}-parity {{ _int['mount'] }}/snapraid.{{ count }}-parity
{% endif %}
{% endif %}
{% endfor %}

# Defines the files to use as content list
# You can use multiple specification to store more copies
# You must have least one copy for each parity file plus one. Some more don't hurt
# They can be in the disks used for data, parity or boot,
# but each file must be in a different disk
# Format: "content FILE"
content /var/snapraid.content
{% for int in snapraid.disks|sort %}
{% set _int = snapraid.disks[int] %}
{% if _int['content'] %}
content {{ _int['mount'] }}/snapraid.content
{% endif %}
{% endfor %}

# Defines the data disks to use
# The name and mount point association is relevant for parity, do not change it
# WARNING: Adding here your /home, /var or /tmp disks is NOT a good idea!
# SnapRAID is better suited for files that rarely changes!
# Format: "data DISK_NAME DISK_MOUNT_POINT"
{% for int in snapraid.disks|sort %}
{% set _int = snapraid.disks[int] %}
{% if _int['type']|lower == 'data' %}
data {{ int }} {{ _int['mount'] }}/
{% endif %}
{% endfor %}

# Excludes hidden files and directories (uncomment to enable).
{% if snapraid.exclude_hidden_files %}
nohidden
{% else %}
#nohidden
{% endif %}

# Defines files and directories to exclude
# Remember that all the paths are relative at the mount points
# Format: "exclude FILE"
# Format: "exclude DIR/"
# Format: "exclude /PATH/FILE"
# Format: "exclude /PATH/DIR/"
{% for file in snapraid.exclude_files %}
exclude {{ file }}
{% endfor %}

# Defines the block size in kibi bytes (1024 bytes) (uncomment to enable).
# WARNING: Changing this value is for experts only!
# Default value is 256 -> 256 kibi bytes -> 262144 bytes
# Format: "blocksize SIZE_IN_KiB"
{% if snapraid.blocksize is defined %}
blocksize {{ snapraid.blocksize }}
{% else %}
#blocksize 256
{% endif %}

# Defines the hash size in bytes (uncomment to enable).
# WARNING: Changing this value is for experts only!
# Default value is 16 -> 128 bits
# Format: "hashsize SIZE_IN_BYTES"
{%if snapraid.hashsize is defined %}
hashsize {{ snapraid.hashsize }}
{% else %}
#hashsize 16
{% endif %}

# Automatically save the state when syncing after the specified amount
# of GB processed (uncomment to enable).
# This option is useful to avoid to restart from scratch long 'sync'
# commands interrupted by a machine crash.
# It also improves the recovering if a disk break during a 'sync'.
# Default value is 0, meaning disabled.
# Format: "autosave SIZE_IN_GB"
{% if snapraid.autosave is defined %}
autosave {{ snapraid.autosave }}
{% else %}
#autosave 500
{% endif %}

# Defines the pooling directory where the virtual view of the disk
# array is created using the "pool" command (uncomment to enable).
# The files are not really copied here, but just linked using
# symbolic links.
# This directory must be outside the array.
# Format: "pool DIR"
{% if snapraid.pool is defined %}
pool {{ snapraid.pool }}
{% else %}
#pool /pool
{% endif %}

# Defines a custom smartctl command to obtain the SMART attributes
# for each disk. This may be required for RAID controllers and for
# some USB disk that cannot be autodetected.
# In the specified options, the "%s" string is replaced by the device name.
# Refers at the smartmontools documentation about the possible options:
# RAID -> https://www.smartmontools.org/wiki/Supported_RAID-Controllers
# USB -> https://www.smartmontools.org/wiki/Supported_USB-Devices
#smartctl d1 -d sat %s
#smartctl d2 -d usbjmicron %s
#smartctl parity -d areca,1/1 /dev/sg0
#smartctl 2-parity -d areca,2/1 /dev/sg0
